==========================
 Weekly OCaml exercise #2
==========================

Difficulty level : Easy

Problem :

If S is a set, then P(S), the 'powerset' of S is the set of all
subsets of S including the empty set and S itself. If S has
cardinality N then the cardinality of P(S) is 2^N (why?).

Write the function 'powerset' that computes the powerset of a given
set. Your function will satisfy this signature:
::

  val powerset : 'a list -> 'a list list 

For example, in the top-level:
::

  # sets [1; 2; 3] ;;
  - : int list list = [[]; [3]; [2]; [2; 3]; [1]; [1; 3]; [1; 2]; [1; 2; 3]]

The ordering of the sets is not important here, just that all the
required sets are discovered.

As before, please submit your solutions to me on MSG. To help me find
them easily, please use the subject line, "Weekly OCaml exercise #2".

Have a good weekend!

::

  (*Eugene Perederey*)
  let rec sets = function
    | [] -> [[]]
    | (x::xs) -> 
       let ps = sets xs in
       List.concat [ps; List.map (fun l -> x::l) ps]  
  ;;  
