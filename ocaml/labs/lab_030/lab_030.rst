
html,
    h1 {
    font-family: Helvetica, Geneva, Arial,  SunSans-Regular, sans-serif 
    }
    body {
    font-family:Verdana, Geneva, sans-serif; 
   }
Weekly Exercises : #030
2016-10-12 by 
Difficulty level :
Easy/medium
Problem :
 Marilyn vos Savant's "Ask Marilyn" column in Parade magazine in 1990:

Suppose you're on a game show, and you're given the choice of three doors : Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what's behind the doors, opens another door, say No.3 which has a goat. He then says to you, "Do you want to pick door No. 2?" Is it to your advantage to switch your choice?

What do you think?

[Note : The rules of the game in N doors are, the player picks one of N doors, the host then opens all but the player's door and one other such that all the doors opened have goats behind them. Then the player is invited to switch.]

This problem is known as the "Monty Hall" problem. It's named after the host of the American television game show "Let's make a deal". Paul Erd≈ës, one of the most prolific mathematicians in history remained unconvinced (of the correct answer to the above problem) until he was shown a computer simulation confirming the predicted result.

The problem this week is to write a simulation of this game and use it to produce evidence supporting your theory of whether it is better to "hold" or "switch".
Solution(s) :
Nate McNamara started with this K program...
trials:{[n;d]
  h:0+/(n?d)=n?d;
  `hold`herr`switch`serr!(h; abs(h%n)-%d; n-h; abs(1-h%n)-(d-1)%d)}
... to produce this :
let rand n m =
  let rec f acc n =
    if n <= 0 then acc else f (Random.int m::acc) (n - 1)
  in f [] n;;
 
let map2 f x y =
  let rec g acc x y = match x with
      []   -> acc
    | h::t -> g ((f h (List.hd y))::acc) t (List.tl y)
  in List.rev (g [] x y);;


let eq = map2 (fun a b -> a = b);;
 
let bsum = List.fold_left (fun x y -> x + (if y then 1 else 0)) 0;;
 
let trials n d = let h  = bsum (eq (rand n d) (rand n d)) in
                 let nf = float_of_int n in
                 let hf = float_of_int h in
                 let df = float_of_int d in
  Printf.printf "Num wins (hold): %d\nError %f\nNum Wins (switch): %d\nError %f\n"
                h       (abs_float (hf /. nf -. 1.0 /. df))
                (n - h) (abs_float ((1.0 -. hf /. nf) -. (df -. 1.0) /. df));;

Joel Bjornson gave this succinct offering :
let simulate ~switch num_doors =
  (* Randomly assign a door to hide the car behind *)
  let car = Random.int num_doors in
  (* Select random door representing the first guess *)
  let choice = Random.int num_doors in
  (* The host opens all doors but one. If strategy is 'switch',
     car is found unless it's behind the door initially selected.
     If strategy is 'hold', the car is found only if it's behind the
     door initially selected. *)
  if switch then choice <> car else choice = car
  
let run ~switch num_doors num_trials =
  let wins = ref 0 in
  for i = 1 to num_trials do
    wins := !wins  + if simulate ~switch num_doors then 1 else 0
  done;
  float_of_int !wins /. float_of_int num_trials

Lastly, my solution follows.
module Monty = struct
 
  (*[dtr w p n] where [n] is the number of doors, selects which "door
    to remain" (closed) given the winning door [w] and the player
    chosen door [p]*)
  let rec dtr w p n =
    if p <> w then 
      (*The player hasn't chosen the winning door, so leave that closed*)
      w 
    else
      (*The player chose the winning door, so pick any other door to keep
        closed*)
      if p = 0 then n - 1 else 0
 
  (*[gen_game d] generates a game with [d] doors and returns a game
    with a winning door, a player selected door and a door to keep
    closed before if the player wants to switch*)
  let gen_game (d : int) : (int * int * int) =
    let w = Random.int d and p = Random.int d in 
    (w, p, dtr w p d)
 
  let num_wins = ref 0 (*To keep track of scores*)
  type strategy = Hold | Switch (*The type of strategies*)
 
  (*Play a single game*)
  let play_game (d : int) (s : strategy) : unit =
    let w, p, r = gen_game d in
    match s with
    | Hold -> num_wins := !num_wins + if p = w then 1 else 0
    | Switch -> num_wins := !num_wins + if r = w then 1 else 0
 
  (*Play a set of [n] games*)
  let play_games (d : int) (n : int) (s : strategy ) : unit = 
    let rec loop (i : int) : unit = 
      if i = n then ()
      else  begin
        play_game d s;
        loop (i + 1)
      end 
    in loop 0
end
 
open Monty
 
(*Initialized from the command line*)
let version       = ref false
let num_doors     = ref 0
let num_sims      = ref 0
 
let read_args () =
  let specification =
    [("-v", Arg.Set version, "Print the version number");
     ("-d", Arg.Set_int num_doors, "Number of doors (>= 3)" );
     ("-n", Arg.Set_int num_sims, "Number of simulations (>= 1)");
    ]
  in Arg.parse specification
  (fun s ->
    Printf.printf "Warning : Ignoring unrecognized argument \"%s\"\n" s)
  "Usage : monty -d <number of doors> -n <number of simulations>"
 
(*[fabs e] computes the absolute value of [e]*)
let fabs (e : float) : float = if e < 0. then ~-.e else e
 
(*Driver*)
let () = 
  try
    read_args ();
    if !version then Printf.printf "1.0.0\n"
    else
      let n = !num_sims and d = !num_doors in
      if d < 3 then
        raise (Invalid_argument "Number of doors must be >= than 3");
      if n < 1 then
        raise (Invalid_argument "Number of simulations must be >= 1");
      begin
        (*Hold*)
        num_wins := 0;
        play_games d n Hold;
        Printf.printf "Num wins (hold): %d\n" !num_wins;
        let err=fabs (float_of_int (!num_wins) /. 
                    (float_of_int n) -. 1.0 /. (float_of_int d)) in
        Printf.printf "Error %f\n" err;
        (*Switch*)
        num_wins := 0;
        play_games d n Switch;
        Printf.printf "Num wins (switch): %d\n" !num_wins;
        let err=fabs (float_of_int (!num_wins) /. 
                   (float_of_int n) -. (float_of_int (d - 1) /. 
                                                (float_of_int d))) in
        Printf.printf "Error %f\n" err ;
      end
  with 
  | Invalid_argument s -> Printf.printf "%s\n" s
