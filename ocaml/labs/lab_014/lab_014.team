
html,
    h1 {
    font-family: Helvetica, Geneva, Arial,  SunSans-Regular, sans-serif 
    }
    body {
    font-family:Verdana, Geneva, sans-serif; 
   }
Weekly Exercises : #14
2015-05-29 by 
Difficulty level :
Easy
Problem :
Let's sharpen up! If you've skipped out of these exercises for a while, take the chance to get back into the fray! If you haven't submitted before, here's your chance to get started! This is an easy one for real - shouldn't take you more than 15 minutes (smile)

Implement the so-called "runtime-length encoding data compression method". For our purposes, it's enough to do this:
Write a function that packs consecutive elements of a list into sublists. For example, given let x = pack ['a';'a';'a';'a';'b';'c';'c';'a';'a';'d';'e';'e';'e';'e'] we expect x to have the value, [['a';'a';'a';'a'];['b'];['c';'c'];['a';'a'];['d'];['e';'e';'e';'e']]
In the next step, encode the result of pack into a list of pairs (n, e) where n is the number of occurrences of the expression e. For example, given let y = encode (pack ['a';'a';'a';'a';'b';'c';'c';'a';'a';'d';'e';'e';'e';'e']) then we expect y to have the value [(4, 'a'); (2, 'c'); (2, 'a'), (1, d); (4, 'e')].
Write a function to decode a list given in runtime-length encoded data compressed format as defined above.
Solutions expected by close of business this coming Friday!
