
html,
    h1 {
    font-family: Helvetica, Geneva, Arial,  SunSans-Regular, sans-serif 
    }
    body {
    font-family:Verdana, Geneva, sans-serif; 
   }
Weekly Exercises : #028
2016-08-25 by 
Difficulty level :
Medium/hard
Problem :
Back in Week#009, we implemented binary search trees. Those trees didn't include a requirement that they be perfectly balanced. This lecture and this one provide some insights into how to incorporate the additional invariants for perfectly balanced binary search trees. Using the red-black technique or any other, write a module satisfying the following signature:
(**Association tables*)


(**The type of tables where ['a] is the key type and ['b] the type of
   values. Comparison of keys uses [Pervasives.compare]*)
type ('a, 'b) t


val empty : ('a, 'b) t
(**The empty table*)


val add : 'a -> 'b -> ('a, 'b) t -> ('a, 'b) t
(**[add x v t] computes a new table from [t] in which [x] is bound to
   [v]*)


val remove : 'a -> ('a, 'b) t -> ('a, 'b) t
(**[remove x t] computes a new table from [t] that does not contain a
   binding for [x]*)


val find : 'a -> ('a, 'b) t -> 'b
(**[find x t] searches for the ['b] associated with [x] in [t]. @raise
   Not_found if [x] is not in [t]*)


val mem : 'a -> ('a, 'b) t -> bool
(**[mem x t] searches for [t] for [x] returing [true] if found,
   [false] if not*)


val iter : ('a -> 'b -> unit) -> ('a, 'b) t -> unit
(**[iter f tab] applies [f] to each binding in [t]*)


val map : ('a -> 'b -> 'c) -> ('a, 'b) t -> ('a, 'c) t
(**[map f tab] computes a table with the same keys as [t] by
   application of [f] to each binding in [t]*)


val fold : ('a -> 'b -> 'c -> 'c) -> ('a, 'b) t -> 'c -> 'c
(**[fold f t z] computes a value from a seed [z] by folding [f] over
   [t]*)


val print : (Format.formatter -> 'a -> unit) -> 
  (Format.formatter -> 'b -> unit) -> Format.formatter -> ('a, 'b) t -> unit
(**[print print_key print_data ppf t] formats [t] on [ppf] by way of
   [print_key] and [print_data]*)

Solutions :
Joel Bjornson
module Tree = struct
  type ('k, 'v) t =
    | Leaf
    | Node of 'k * 'v * int * ('k,'v) t * ('k,'v) t


  let map f tree =
    let rec aux t cont =
      match t with
      | Leaf -> 
        cont Leaf
      | Node (k,v,h,l,r) -> 
        aux l @@ fun l -> aux r @@ fun r -> cont @@ Node (k, f k v, h,l,r)
    in
    aux tree (fun x -> x)


  let fold f tree zero =
    let rec aux s t cont =
      match t with
      | Leaf  ->
        cont s
      | Node (k,v,_,l,r) ->
        aux s r @@ fun s -> 
          let s = f k v s in
          aux s l cont
    in
    aux zero tree (fun x -> x)


  let height tree =
    match tree with
    | Leaf              -> 1
    | Node (_,_,h,_,_)  -> h

  let zero_balance = 0
  let low_balance = -2
  let high_balance = 2
  let node k v l r = Node (k, v, 1 + max (height l) (height r), l, r)


  let balance = function 
    | Leaf  -> zero_balance
    | Node (_,_,_,l,r) -> height l - height r


  (* Rotates to the left. Right child node will be the new root node. *)
  let rotate_left = function
    | Node (k,v,h,l, Node (rk,rv,rh,rl,rr)) ->
      node rk rv (node k v l rl) rr
    | tree->
      tree


  let rotate_right = function
    | Node (k,v,h,Node (lk, lv,lh,ll,lr), r) ->
        node lk lv ll ( node k v lr r)
    | tree ->
      tree


  let balance = function
    | Leaf  ->
      Leaf
    | Node(k,v,_,l,r) as tree ->
      match balance tree with
      | b when b <= low_balance ->
        rotate_left @@
          (* Right leaning case *)
          if balance r > zero_balance then
            (* Right-left case *)
            node k v l (rotate_right r)
          else
            (* Right-right case. *)
            tree
      | b when b >= high_balance ->
        rotate_right @@
          if balance l < zero_balance then
            (* Left-right case. *)
            node k v (rotate_left l) r
          else
            (* Left-left case. *)
            node k v l r
      | _ ->
          tree


  let add k v tree  =
    let rec aux tree cont =
      match tree with
      | Leaf                      ->
        cont @@ node k v Leaf Leaf
      | Node (k',v', h, l, r)   ->
        match compare k k' with
        | -1  ->
          aux l @@ fun l' -> node k' v' l' r |> balance |> cont
        | 0     ->
          cont @@ node k v l r
        | _     ->
          aux r @@ fun r'  -> node k' v' l r' |> balance |> cont
    in
    aux tree (fun x -> x)


  let merge l r =
    (* Removes the largest element from the tree *)
    let rem_largest tree =
      let rec aux tree cont = 
        match tree with
        | Leaf              -> 
          assert false
        | Node(k,v,_,l,Leaf) ->
          cont ((k,v), l)
        | Node (k,v,_,l,r)    ->
          aux r @@ fun (kv', r') -> 
            cont (kv', (balance @@ node k v l r'))
      in
      aux tree (fun x -> x)
    in


    (* Removes the smallest element from the tree. *)
    let rem_smallest tree =
      let rec aux tree cont=
        match tree with
        | Leaf                  ->
          assert false
        | Node (k,v,_,Leaf, r)  ->
          cont ((k,v),r)
        | Node (k,v,_,l,r)       ->
          aux l @@ fun (kv',l') -> cont (kv', balance @@ node k v l' r)
      in
      aux tree (fun x -> x)
    in
    match l, r with
    | Leaf, _   ->
      r
    | _, Leaf   ->
      l
    | l, r      ->
      if height l <= height r then
        let ((k',v'), l') = rem_largest l in
        node k' v' l' r
      else
        let ((k',v'),r') = rem_smallest r in node k' v' l r'


  let lookup key tree =
    let rec aux = function
      | Leaf -> 
        None
      | Node (k,v, _, l, r)    ->
        match compare key k with
        | -1  -> aux l
        | 0   -> Some v
        | _   -> aux r
    in
    aux tree


  let remove key tree  =
    let rec aux tree cont =
      match tree with
      | Leaf  ->
        cont Leaf
      | Node (k,v,_,l,r)  ->
        match compare key k with
        | -1    ->
          aux l @@ fun l' ->
            node k v l' r |> balance |> cont
        | 0     ->
            merge l r |> balance |> cont
        | _     ->
            aux r @@ fun r' ->
                node k v l r' |> balance |> cont
    in
    aux tree (fun x -> x)


  let of_list xs = List.fold_left (fun t (k,v) -> add k v t ) Leaf xs
end


module Table : Table_sig = struct
  module T = Tree 
  type ('a, 'b) t = ('a, 'b) Tree.t


  let empty = T.Leaf


  let add = T.add 


  let remove = T.remove


  let find k t = 
    match T.lookup k t with
    | Some x -> x
    | _     -> raise Not_found


  let mem k t = 
    match T.lookup k t with 
    | Some _  -> true
    | None    -> false 


  let iter f t = ignore @@ T.map f t


  let map f t = T.map f t


  let fold f = T.fold f


  let print fk fv f t =
    let open Format in
    let print k v =
      pp_print_string f "  " ; fk f k; pp_print_string f " , "; fv f v;
      pp_print_newline f ();
    in
    pp_print_string f "[";
    pp_print_newline f ();
    pp_open_vbox f 2;
    iter print t;
    pp_close_box f ();
    pp_print_string f "]";
    pp_print_newline f ();
end


(* Test module relying on 'CamlCheck' for generating random test data
 * in order to verify the properties.
 * See: https://bbgithub.dev.bloomberg.com/jbjornson2/CamlCheck
 * More to come on that!
 *)
module Test = struct
  open Tree
  open Bb_camlcheck


  let rec real_height = function
    | Leaf -> 0
    | Node (_,_,_,l,r) -> 1 + max (real_height l) (real_height r)


  let is_balanced = function
    | Leaf -> true
    | Node (_,_,_,l,r) ->
      abs (real_height l - real_height r) <= 2


  (* States that any tree constructed from a list of key value pairs
   * should be balanced *)
  let prop_is_balanced (xs : (int * string) list) =
    let t = of_list xs in
    is_true @@ is_balanced t


  (* Property that checks that a tree is still balanced after removing
   * any number of its keys in random order *)
  let prop_is_balanced_after_removing (n, (xs : (int * int) list)) =
    (xs <> []) ==> fun () ->
      let t = of_list xs in
      (* Select first n random keys *)
      let ks =
        let n = n mod List.length xs in
        xs
        |> List.sort (fun x y -> compare (snd x) (snd y)) 
        |> List.mapi (fun i (x,_) -> (i,x))
        |> List.filter (fun (i,x) -> i <= n) 
        |> List.map snd
      in
      let t = List.fold_left (fun t k -> remove k t) t ks in
      is_true @@ is_balanced t


  (* Verifies tht mapping with idenity should preserve the tree *)
  let prop_map_ident (xs : (int * int) list) =
    let t = of_list xs in
    map (fun _ v -> v) t === t


  (* Using CamlCheck to generate random test data for checking the properties *)
  let run_tests () = 
    check prop_is_balanced;
    check prop_is_balanced_after_removing;
    check prop_map_ident
end


Peter Nguyen
(** Author: Peter Nguyen (R&D)
 *  Date: August 9, 2016
 *  AVL tree implementation of a dictionary/association table *)
 
(** Our type definition: key * val * left subtree * right subtree * height **)
type ('a, 'b) t = Empty | Node of 'a * 'b * ('a, 'b) t * ('a, 'b) t * int


(*** HELPER FUNCTIONS ***)
(* function composition operator *)


let (<.>) f g = fun x -> f @@ g x


(* Misc tree stuff *)
let height_tree = function Empty -> 0 | Node(_,_,_,_,h) -> h


let balance_factor = function 
| Empty -> 0
| Node(_,_,l,r,_) -> height_tree r - height_tree l


let update_height = function 
| Node(k,v,l,r,_) -> Node(k,v,l,r,1 + max (height_tree l) (height_tree r))
| Empty -> Empty


(** ROTATIONS **)
let left_rot = function
| Node(k,v,l,Node(k',v',l',r',h'),h) -> update_height @@ Node(k',v', 
                                                              update_height @@ Node(k,v,l,l',h), 
                                                              r', h')
| _ -> failwith "left_rot failure"


let right_rot = function
| Node(k,v,Node(k',v',l',r',h'),r,h) -> update_height @@ Node(k',v',
                                                              l',
                                                              update_height @@ Node(k,v,r',r,h),
                                                              h')
| _ -> failwith "right_rot failure"


let left_right_rot = function
| Node(k,v,l,r,h) -> let t = update_height @@ Node(k,v,left_rot l,r,h) in right_rot t 
| _ -> failwith "left_right_rot failure"


let right_left_rot = function
| Node(k,v,l,r,h) -> let t = update_height @@ Node(k,v,l,right_rot r,h) in left_rot t 
| _ -> failwith "right_left_rot failure"


(* DRIVER FOR ROTATION FUNCTIONS *)
let rebalance = function
| Empty -> Empty
| Node(_,_,l,r,_) as t -> (if balance_factor t >= 2 then
                            (if balance_factor r >= 0 
                             then left_rot        (* Left rot *)
                             else right_left_rot) (* Right-Left rot *)
                          else if balance_factor t <= -2 then
                            (if balance_factor l <= 0 
                             then right_rot       (* Right rot *)
                             else left_right_rot) (* Left-Right rot *)
                          else fun x -> x) t


(* 'PRINT' HELPERS *)
let rec printTabs = function
| 0 -> ()
| n -> Format.print_char '\t'; printTabs @@ n - 1
(* A couple notes about 'print':
 * 0. It prints out the tree structure of the dictionary (for debug purposes)
 * 1. The tree prints sideways, with the root at the left margin, and growing
 *    to the right
 * 2. The left branches are printed out before the right branches, meaning
 *    that the left branches will sit *above* the right branches
 * 3. Each node is printed out as <key>/<value>/<height> (height printed out for
 *    debugging purposes)
 *
 *    Ex: Adding the elements (1 -> 'a'), (2 -> 'b'), and (3, 'c') in this order
 *        yields the following output when printed (asterisks represent EMPTY):
 *
 *                                  * 
 *                         1/'a'/1  
 *                                  *
 *              2/'b'/2     
 *                                  *
 *                         3/'c'/1
 *                                  *
 ***)
let rec print' pp_key pp_val ppf h = Format.(function
| Empty                -> printTabs h; print_string "*\n" 
| Node (k, v, l, r, d) -> print' pp_key pp_val ppf (h+1) l; 
                          printTabs h; Format.(fprintf ppf "%a/%a/%d\n" pp_key k pp_val v d);
                          print' pp_key pp_val ppf (h+1) r)


(* 'REMOVE' HELPERS *)
let rec drill_left = function
| Empty -> raise Not_found
| Node(k,v,l,_,_) -> match l with Empty -> k,v | _ -> drill_left l


let get_successor = function 
| Empty -> raise Not_found
| Node(_,_,_,r,_) -> drill_left r 


(*** END HELPERS ***)


(*** DEFINITION OF INTERFACE VALUES & FUNCTIONS ***)
let empty = Empty
(* Using Pervasives.compare:
   compare a b = -1 => a < b
   compare a b =  1 => a > b 
   compare a b =  0 -> a = b *)


let rec add k v = function
| Empty -> Node(k,v,Empty,Empty,1)
| Node(k',v',l,r,h) -> let comp = compare k k' in
                       if comp = 0 then Node(k,v,l,r,h)
                       else (rebalance <.> update_height) 
                            (if comp = 1 then Node(k',v', l, add k v r, h)
                             else Node(k',v', add k v l, r, h))


let rec remove k  = function
| Empty -> Empty
| Node(k',v,l,r,h) as t -> let comp = compare k k' in (rebalance <.> update_height) 
        (if      comp = -1 then Node(k',v,remove k l,r,h)
         else if comp =  1 then Node(k',v,l,remove k r,h)
         else match l,r with
         | Empty, Empty -> Empty
         | Empty, r     -> r
         | l, Empty     -> l
         | l,r          -> let k'',v'' = get_successor t in
                           Node(k'',v'',l,remove k'' r,h))


let rec find x = function
| Empty -> raise Not_found
| Node (k, v, l, r, _) -> let comp = compare x k in
                          if comp = 0 then v
                          else find x (if comp = 1 then r else l)


let rec mem x = function
| Empty -> false
| Node(k,v,l,r,_) -> let comp = compare x k in 
                     if comp = 0 then true 
                     else mem x (if comp = 1 then r else l)


(* In order traversal *)
let rec iter f = function
| Empty -> ()
| Node(k,v,l,r,_) -> iter f l; f k v; iter f r


let rec map f = function
| Empty -> Empty
| Node(k,v,l,r,h) -> Node(k,f k v, map f l, map f r, h)
(* In order traversal *)


let rec fold f t c = match t with
| Empty -> c
| Node(k,v,l,r,_) -> let c'  = fold f l c in
                     let c'' = f k v c' in
                     fold f r c''
let print pp_key pp_val ppf t = Format.open_box 0; 
                                print' pp_key pp_val ppf 0 t;
                                Format.close_box ()
