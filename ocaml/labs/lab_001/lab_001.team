html,
    h1 {
    font-family: Helvetica, Geneva, Arial,  SunSans-Regular, sans-serif 
    }
    body {
    font-family:Verdana, Geneva, sans-serif; 
   }
Weekly Exercises : #1
2015-01-15 by 
Difficulty level :
Easy
Problem :
Write the function suffixes that works as in the following example.
  # let suffixes l =
     ... (*Your implementation goes here*)
  ;;
            val suffixes : 'a list -> 'a list list = <fun>
  # suffixes [1; 2; 3; 4] ;;
  - : int list list = [[1; 2; 3; 4]; [2; 3; 4]; [3; 4]; [4]; []]
Solutions :
What is called for is repeated extraction of the tail of a list until there is no more tail to be had. Most of the solutions offered achieved that with a recursive function along the lines of 
  let rec suffixes l = 
    match l with 
    | [] -> [] 
    | h::t -> (h::t) :: suffixes t
Here's another submission based on the same idea, this time tail-recursive.
  let suffixes l =
    let rec suff l n =
      match l with
            | [] -> List.rev n
            | hd :: tl  -> suff tl (tl :: n)
    in suff l [l]
Both of these are broken however in that they don't count the empty list. That of course can be easily fixed as in this solution
  let rec suffixes l = match l with
      [] -> [[]]
      | l -> l :: suffixes (List.tl l)
or, this tail recursive one
  let rec suffix_helper acc l = match l with
      | [] -> [] :: acc
      | (hd :: tl) -> suffix_helper ((hd :: tl) :: acc) tl
  let suffix l = List.rev (suffix_helper [] l)

The solutions so far have used recursion directly. Others took the approach of getting the recursion indirectly by means of a fold. Here's one that employs fold_left:
  let suffixes_foldleft l =
    let helper acc elem =
      (elem :: (List.hd acc)) :: acc
    in
    List.fold_left helper [[]] (List.rev l)
Here's another that this time uses fold_right.
let suffixes l = List.fold_right (fun x -> function ys::l -> (x::ys)::ys::l) l [[]]
It takes advantage of the fact that 
   # [] :: [] ;;
  - : 'a list list = [[]]
so match [[]] with x :: ys gives x = [] and ys = []. For example in the first 'iteration', x is the element under consideration,  ys = [] and l = [] and the result is 
    # (4 :: []) ::[] :: [] ;;
    - : int list list = [[4]; []]
Although that one above is very beautiful, fold_left is tail recursive whereas fold_right is not so that needs to be taken into consideration. This one
  let suffixes ys =
    let flip f x y = f y x in
    let f _ = function 
      | (ss, x::xs) -> ((x::xs)::ss, xs) 
      | (ss, []) -> (ss, []) in
    List.rev ([] :: (fst (List.fold_left (flip f) ([], ys) ys)))
works (and is certainly clever) but I found it somewhat impenetrable to the human reader (and that matters - "readability counts!") (smile) By the way, did you know there is a function in the Pervasives called |> that does 'reverse application'? That is,  x |> f is f x, the application of the function f to the argument x. This can sometimes be used to great effect in your programs!
Despite the fact that it's not tail recursive, this last one gets my vote as the 'killer' solution to this problem. It's elegance is unbeatable!
  let rec suffixes (l : 'a list) = 
    l :: match l with
    | []      -> []
    | _ :: t  -> suffixes t
