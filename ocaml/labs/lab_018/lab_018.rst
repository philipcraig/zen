
html,
    h1 {
    font-family: Helvetica, Geneva, Arial,  SunSans-Regular, sans-serif 
    }
    body {
    font-family:Verdana, Geneva, sans-serif; 
   }
Weekly Exercises : #18
2015-12-02 by 
Difficulty level :
Easy
Problem :
Since we haven't done a weekly exercise for a while, I'm posting a "beginners" one to get us all back in the swing of it (smile)

On June 13, 1676, Newton wrote a letter to Leibniz. He was writing to explain that he had found a generalization of the "Binomial theorem" (allowing for quick extraction of roots) which was:
(P + PQ)m/n = Pm/n + (m / n)AQ + ((m - n)/2n)BQ + ((m - 2n)/3n)CQ + ((m - 3n)/4n)DQ + ...
where P, Q are real and m, n (<> 0) are integers and A stands for the first term Pm/n; B for the second term (m / n)AQ and so on. Now, with a little algebra you'll  be able to use the above formula to arrive at an expression for (1 - x)m/n (this is not a requirement, regard it as a maybe useful hint). By way of Newton's "theorem", write a program to estimate the value of sqrt 2. accurate to within 0.0001. How many terms were required to produce the approximation?

By the way, about this work, Newton later wrote : "I am ashamed to tell you to how many figures I carried these calculations, having not other business at the time."

Solution(s):
This is a fairly obvious straightforward translation. If there's a twist, it's in phrasing the program as a higher order function where the provided function argument is used to test for termination.
let fabs x = if x > 0. then x else (~-.x)
 
(*Newton's formula for (P + PQ)**(m / n) with P, Q in R and m, n in
  Z*)
let newton 
   (p : float) 
   (q : float) 
   (m : int) 
   (n : int) 
   (term : int -> float -> bool) =
  let rec loop acc =
    let s, last, i = acc in
    let num = float_of_int (m - ((i - 1) * n)) in
    let denom =  float_of_int (i * n) in
    let ti = (num /. denom) *. last *. q in
    let s' = s +. ti in
    if (term i s') then (i, s')
    else loop (s', ti, (i + 1))
 in
  let y  = (float_of_int m) /. (float_of_int n) in
  let init = p ** y in
  loop (init, init, 1)
 
(*Approximate sqrt 2 with P = 1, Q = 1, m/n = 1/2*)
let _ = 
  let sqrt2 = sqrt 2.0 in
  newton 1.0 (~-.0.5) 1 2 (fun i x -> fabs (2.0 *. x -. sqrt2) <= 0.0001)
(*Terminates after 8 terms*)
As the above shows, the key to getting quick convergence is in recognizing that sqrt 2 = 2 * sqrt(1 - 1/2) although other formulations (even better than that -see the BLAN entries) are possible.

Here's another submission:

let exp_eps m n e x =
    if x < 0. then failwith "Be positive!" else
    let absf a = if a < 0. then (-. a) else a
    in let rec power acc a n = if n > 0 then power (a*acc) a (n - 1) else acc
    in let divider = float_of_int @@ power 1 2 n
    in let rec calibrate (mult, z) = if z < 1. then (mult, z) else calibrate (2 * mult, z /. divider)
    in let mult, y = calibrate (1, x)
    in let z = y -. 1.
    in let rec aux acc konst term i =
        if i > 1000 then acc (* Don't try too hard, it's not nice *)
        else let konst1 = float_of_int(m - ((i - 1) * n)) /. float_of_int(i * n)
            in let term1 = konst1 *. z *. term
            in let acc1 = term1 +. acc
            in if absf(term1) < e
            then let () = 
                print_string @@
                    Printf.sprintf
                    "i = %5d; konst = %10f; term = %10f; acc = %10f;\n"
                    i konst1 term1 acc1
            in acc1
            else aux acc1 konst1 term1 (i + 1)
    in (float_of_int mult) *. (aux 1. 1. 1. 1)

The expression to compute sqrt 2 to the desired tolerance using the above program is exp_eps 1 2 0.0001 2.
The author writes:

"All my functions are tail-recursive and are very fast. The idea is:
Given positive integers m & n, I will calibrate the input number x so that it's reflection y = x/((2n)t) will be smaller than 1
Since we know how to calculate (1 - a)(m/n) with 0 <= a <= 1, now we have 0 < y < 1, we will calculate y = 1 - z
 don't handle negative input for now, adding it is not a big deal".
