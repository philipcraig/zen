html,
    h1 {
    font-family: Helvetica, Geneva, Arial,  SunSans-Regular, sans-serif 
    }
    body {
    font-family:Verdana, Geneva, sans-serif; 
   }
Weekly Exercises : #9
2015-03-11 by 
Difficulty level :
Medium/hard
Problem :
This week's problem offers a chance to gain some practical experience in some language concepts that might be less than familiar to the beginner OCaml programmer:
Modules;
Module signatures;
Functors.
 Binary search trees
The program to be written this week is the abstract data type of 'sets', implemented as a data structure known as a binary search tree.
A binary search tree is a binary tree with the following representation invariant : For any node n, every node in the left sub-tree rooted at n has a value less than that of n and every node in the right sub-tree rooted at n has a value more than that of n.
The running time of insertion/lookup (they have the same cost) in a binary search tree is proportional to the height h of the tree. In the worst case, a tree of n nodes is layed out along a single long branch so the worst case running time is O(n).
[Note : A perfect binary tree has the largest number of nodes n for a given height h : n = 2(h + 1) - 1. Therefore h = lg (n + 1) - 1 = O(lg n). It is possible to strengthen the invariant above to maintain so called "perfectly balanced" binary search trees (e.g. red-black trees) but this adds complexity to the implementation and we won't go so far as to require this feature here.]
Here's the set of operations to implement summarized as an OCaml module signature:
 module type Set_sig = sig
    type element  (*The type of elements of a set*)
    type t (*The type of a set of elements*)
  
    exception Empty_set
  
    val empty : t (*The empty set*)
    val add : t -> element -> t (*Add an element*)
    val remove : t -> element -> t * element (*Remove an element*)
    val fold : t -> 'a -> ('a -> element -> 'a)  -> 'a (*Visit elements in order*)
    val contains : t -> element -> bool (*Test for membership*)
    val size : t -> int (*Cardinality of a set*)
    val union : t -> t -> t (*The union of two sets*)
    val intersection : t -> t -> t (*The intersection of two sets*)
    val min_element : t -> element (*The minimum value of the set*)
    val max_element : t -> element (*The maximum value of the set*)
    val of_list : element list -> t (*Construct set from unordered list*)
  
  end
Making a module
In this part of the exercise, your implementation shall be written as follows (that is, assumes the set will have integers as elements).
module Int_set : (Set_sig with type element = int) =
    struct
     (*Your code goes here.*)
    end
Writing your code with the assumption that element = int means that elements will be orderable using the built-in Pervasives.compare function and make it easy to transform later into a functor.
Making a functor
As written above, the code is dependent on the built-in comparison functions. To make this more generic, we define another module  signature.
(*Signature for an ordered type*)
module type Ordered_sig =
  sig
    type t
    val compare : t -> t -> int
  end
The idea is that for a given values u, v of type t, compare u v should return a value less than zero if u should be ordered before v, zero if u and v are "equal" and a positive value if u should be ordered after v.
What you have to do now is generalize your set implementation into a functor that takes a module matching the Ordered_sig signature as its argument, and produces a set module (implemented as a binary search tree) which is specialized for that particular type of data. For instance, you can define a module of ordered strings like this:
module Ordered_string : Ordered_sig with t = string =
    struct
      type t = string
      let compare (x : t) (y : t) =
        if x = y then 0 else if x < y then (-1) else 1
    end
Then, define your string set like this:
module String_set : (Set.S with type element = string) = Set.Make (Ordered_string)
To get you started, here is a skeleton of the code you can use for the functor definition:
module type SET = 
  sig
     (*Input signature of the functor [Make]*)
     module type Ordered_type = Ordered_type_sig

     (*Output signature of the functor [Make]*)
      module type S = Set_sig
    
     (*Functor building an implementation of the set structure given a
       totally ordered type*)
      module Make : functor (Ord : Ordered_type) -> S with type element = Ord.t

  end

module Set : SET = 
  struct
    module type Ordered_type = Ordered_type_sig
    module type S = Set_sig

    module Make (Ord : Ord_type) : (S with type element = Ord.t) = 
      struct
        (*Your code goes here*)
      end
  end
For reference and further reading see Introduction to the Objective Caml Language by Jason Hickey, chapters 12-13.
Solutions:
There were 3 complete solutions tendered for this exercise. They were all good. Given that the exercise was really about the opportunity for working with modules and functors, I'll skip an in-depth comparison/review of the binary search tree code itself and simply present my version.
module type Ordered_type_sig = sig
  type t
  val compare : t -> t -> int
end


module type Set_sig = sig
  type element
  type t

  exception Empty_set

  val empty : t (*The empty set*)
  val add : t -> element -> t (*Add an element*)
  val remove : t -> element -> t * element (*Remove an element*)
  val fold : t -> 'a -> ('a -> element -> 'a)  -> 'a (*Visit elements in order*)
  val contains : t -> element -> bool (*Test for membership*)
  val size : t -> int (*Cardinality of a set*)
  val union : t -> t -> t (*The union of two sets*)
  val intersection : t -> t -> t (*The intersection of two sets*)
  val min_element : t -> element (*The minimum value of the set*)
  val max_element : t -> element (*The maximum value of the set*)
  val of_list : element list -> t (*Construct set from unordered list*)
end


module type BST = sig
  (*Input signature of the functor [Make]*)
    module type Elem_type = sig
        include Ordered_type_sig
        val to_string : t -> string
    end


  (*Output signature of the functor [Make]*)
    module type S = sig
      include Set_sig
      val string_of_set : t -> string (*String representation*)
    end


  (*Functor building an implementation of the set structure given a
    totally ordered type*)
  module Make : functor (Elem : Elem_type) -> S with type element = Elem.t
end


module Binary_search_tree : BST = struct
  (*A binary search tree is a binary tree with the following
   representation invariant: 
     - For every node n, every node in the left subtree of n has a
       value less than that of n and every node in the right subtree
       of n has a value more than that of n.  
  *)


  module type Elem_type = sig
      include Ordered_type_sig
      val to_string : t -> string
    end


  module type S = sig
      include Set_sig
      val string_of_set : t -> string (*String representation*)
    end


  module Make (Elem : Elem_type) : (S with type element = Elem.t) = struct

    exception Empty_set

    type element = Elem.t

    type bst = Empty | Node of node
     and node = {value : element; left : bst; right : bst}

    type t = bst (*Set as a binary search tree*)

    let empty : t = Empty

    let rec add (s : t) (e : element) : t =
      match s with
      | Empty -> Node {value = e; left = Empty; right = Empty }
      | Node ({value; left; right} as r) ->
         let c = Elem.compare e value in
         if c = 0 then s else
           if c < 0 then  Node {r with left = add left e}
           else Node {r with right = add right e}


    let rec remove (s : t) (e : element) : (t * element) =
      (*[remove_first t] is [(t', v)] where [v] is the first value in
        [t] and [t'] is a binary search tree with all the elements of
        [t] except [v]*)
      let rec remove_first (s : t) : (t * element) =
        match s with
        | Empty -> raise Empty_set
        | Node {value; left=Empty; right} -> (right, value)
        | Node {left; _} -> remove_first left in 
      (*[remove_last t] is [(t', v)] where [v] is the last value in
        [t] and [t'] is a binary search tree with all the elements of
        [t] except [v]*)
      let rec remove_last (s : t) : (t * element) =
        match s with
        | Empty -> raise Empty_set
        | Node {value; left; right=Empty} -> (left, value)
        | Node {right; _} -> remove_last right in
      match s with
      | Empty -> raise Empty_set
      | Node {value;left;right} ->
         let c = Elem.compare e value in
         if c = 0 then
           match (left, right) with
           | Empty, Empty -> (Empty, value)
           | (_, Empty) -> 
              let (left', prev) = remove_last left in
              (Node {value=prev;left=left';right}, value)
           | _ -> 
              let (right', next) = remove_first right in
              (Node {value=next; left; right=right'}, value)
         else 
           if c < 0 then
             let (left', x) = remove left e in
             (Node {value; left=left';right}, x)
           else (*c > 0*)
             let (right', x) = remove right e in
             (Node{value; left; right=right'}, x)


    let of_list (l : element list) : t =
      List.fold_left (fun s e -> add s e) empty l


    let rec fold (s : t) (acc : 'a) (f : ('a -> element -> 'a)) : 'a =
      match s with
      | Empty -> acc
      | Node {value; left; right} -> 
        fold right (f (fold left acc f) value) f


    let rec contains (s : t) (e : element) =
      match s with
      | Empty -> false
      | Node {value; left; right} ->
         let c = Elem.compare e value in
         (c = 0) || (if c < 0 then contains left e else contains right e)


    let size (s : t) = fold s 0 (fun acc _ -> acc + 1)


    let union (u : t) (v : t) = fold v u (fun acc e -> add acc e)


    let intersection (u : t) (v : t) : t =
      let f acc e = 
        if contains v e then add acc e else acc in
      fold u empty f


    let rec min_element (s : t) : element =
      match s with
      | Empty -> failwith "Empty"
      | Node {value; left; right} ->
         match left, right with
         | (Empty, _) -> value
         | _, _ -> min_element left


    let rec max_element (s : t) : element =
      match s with
      | Empty -> failwith "Empty"
      | Node {value; left; right} ->
         match left, right with
         | (_, Empty) -> value
         | _, _ -> max_element right


    let string_of_set (s : t) : string =
      "{"
       ^(String.concat ", " 
            (List.map (Elem.to_string) 
                 (List.rev (fold s [] (fun acc e -> e :: acc)))))
       ^"}"
  end
end
