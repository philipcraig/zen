
html,
    h1 {
    font-family: Helvetica, Geneva, Arial,  SunSans-Regular, sans-serif 
    }
    body {
    font-family:Verdana, Geneva, sans-serif; 
   }
Weekly Exercises : #033
2017-02-24 by 
Difficulty level :
Easy/Medium
Problem :
Implementing the signature below will provide a good exercise in implementing  a combinator library and a nice refresher on the facilities of the Format module!
 
(**The type of result values in modular form. See the {{!usage} usage
 guidelines}.*)
module type RESULT = sig

  (**{1 Results}*)

  (**Type of a result*)
  type ('a, 'b) result = 
    ('a, 'b) Pervasives.result = | Ok of 'a | Error of 'b

  (**[>>] is [R.( >>| ) ]*)
  val ( >>| ) : ('a, 'b) result -> ('a -> 'c)  -> ('c, 'b) result

  (**[>>=] is [R.( >>= ) ]*)
  val ( >>= ) : ('a, 'b) result -> ('a -> ('c, 'b) result)  -> ('c, 'b) result

  module R : sig
    (**Type alias*)
    type ('a, 'b) t = ('a, 'b) result

    (**[ok a] is [Ok a]*)
    val ok : 'a -> ('a, 'b) t

    (**[error b] is [Error b]*)
    val error : 'b -> ('a, 'b) t

    (**[return a] is [ok a]*)
    val return : 'a -> ('a, 'b) t

    (**[fail b] is [error b]*)
    val fail : 'b -> ('a, 'b) t

    (**[reword_error reword r] is [r] if [r = Ok _] else if 
 [r = Error e] then [Error (reword e)] *)
    val reword_error : ('b -> 'c) -> ('a, 'b) t -> ('a, 'c) t

    (**[get_ok r] is [v] if [r = Ok v] 
 else @raise Invalid_argument otherwise*)
    val get_ok : ('a, 'b) t -> 'a

    (**[get_error r] is [b] if [r = Error b] else @raise
 Invalid_argument otherwise*)
    val get_error : ('a, 'b) t -> 'b

    (**[map f r] if [r = Ok x] is [Ok (f x)] else [r]*)
    val map : ('a -> 'c) -> ('a, 'b) t -> ('c, 'b) t

    (**[bind r f] if [r = Ok x] is [f x] else [r]*)
    val bind : ('a, 'b) t -> ('a -> ('c, 'b) t)  -> ('c, 'b) t

    (**[join r] if [r = Ok x] is [x] else [r]*)
    val join : (('a, 'b) t, 'b) t -> ('a, 'b) t

    (**[r >>| f] is [map f r]*)
    val ( >>| ) : ('a, 'b) t -> ('a -> 'c)  -> ('c, 'b) t
      
    (**[r >>= f] is [bind r f]*)
    val ( >>= ) : ('a, 'b) t -> ('a -> ('c, 'b) t)  -> ('c, 'b) t

  (* -- *)

  (** {1:msgs Error messages} *)

  (**A type for error messages*)
    type msg = [`Msg of string]

  (**[msg s] returns an error message of [s]*)
    val msg : string -> [> msg]

  (**[msgf fmt] computes a function according to a format. ['a]
 unifies with the function type, [[> msg]] is the return type of
 the function computed*)
    val msgf : ('a, Format.formatter, unit, [> msg]) format4 -> 'a
  (**Example:
 {[
 # Result.msgf "Frobincation threshold : %d" 3;; 
 - : [> Result.msg ] = `Msg "Frobincation threshold : 3"
 ]}
 *)

  (**[pp_msg ppf m] prints [m] on [ppf]*)
    val pp_msg : Format.formatter -> msg -> unit

  (**[error_msg s] is [R.error (`Msg s)] *)
    val error_msg : string -> ('a, [> msg]) result

  (**[error_msgf fmt] computes a function. The function type unifies
 with ['a], the return type of the function is [('d, [> `Msg])
 result]*)
    val error_msgf : ('a, Format.formatter, unit, ('d, [> msg]) result) format4 
      -> 'a

  (**[reword_error_msg ~replace reword r] is like [reword_error]
 except if [replace] is [false] (the default), the result of
 [reword old_msg] is concatenated, on a new line to the old
 message*)
    val reword_error_msg : ?replace:bool -> (string -> msg) ->
      ('a, msg) result -> ('a, [> msg]) result

  (**[error_to_msg pp_error r] converts errors in [r] with [ppf_error]
 to an error message*)
    val error_to_msg : pp_error:(Format.formatter -> 'b -> unit) ->
      ('a, 'b) result -> ('a, [> msg]) result
  (**Example:
 {[
 # type err_t = {ctx:string; num:float};;
 # let pp_err_t ppf {ctx; num} = fprintf ppf "%s %12.6f" ctx num;;
 # let r : ('a, err_t) result = R.error {ctx="foo"; num=3.14};;
 # error_to_msg pp_err_t r;;

 - : ('a, [> Result.msg ]) Result.result = Error (`Msg "foo 3.140000")
 ]}
 *)

  (**[error_msg_to_invalid_arg r] is [a] if [r = Ok a] else @raise
 Invalid_argument otherwise*)
    val error_msg_to_invalid_arg : ('a, msg) result -> 'a
  (** Example (cont. from above):
 {[
 # error_msg_to_invalid_arg (error_to_msg pp_err_t r);;

 Exception: Invalid_argument "foo 3.140000".
 ]}
 *)

  (**[open_err_msg r] promotes its argument*)
    val open_error_msg : ('a, msg) result -> ('a, [> msg]) result

  (* -- *)

  (** {1:exn Trapping unexpected exceptions}*)

  (**The type of a trapped exception*)
    type exn_trap = [`Exn_trap of exn * Printexc.raw_backtrace]

  (**[pp_exn_trap ppf t] pretty-prints [t] on [ppf]*)
    val pp_exn_trap : Format.formatter -> exn_trap -> unit

  (**[trap_exn f a] is [f a] and traps any exception that may occur*)
    val trap_exn : ('a -> 'b) -> 'a -> ('b, [> exn_trap]) result
  (**Example:
 {[
 # Result.pp_exn_trap std_formatter 
 (R.get_error (Result.trap_exn (fun _ -> failwith "foo") ()));;

 Failure("foo")
 - : unit = ()
 ]}
 *)

  (**[error_exn_trap_to_msg r] converts trapped exception errors in
 [r] to a message *)
    val error_exn_trap_to_msg : ('a, exn_trap) result -> ('a, [> msg]) result
  (**Example:
 {[
 # Result.error_exn_trap_to_msg (
 Result.trap_exn (fun _ -> failwith "foo") ());;

 - : ('a, [> Result.msg ]) Result.result =
 Error (`Msg "Unexpected exception :\nFailure(\"foo\")\n")
 ]}
 *)

  (* -- *)

  (**{1 Pretty printing}*)

  (**[pp_result ok error ppf r] prints [r] on [pp] using [ok] or
 [error] depending on case*)
    val pp_result :
      ok : (Format.formatter -> 'a -> unit) ->
      error : (Format.formatter -> 'b -> unit) ->
      Format.formatter -> ('a, 'b) result -> unit

  (**[dump ok error ppf r] formats [r] on [pp] using [ok] or [error]
 depending on case*)
    val dump : 
      ok : (Format.formatter -> 'a -> unit) ->
      error : (Format.formatter -> 'b -> unit) ->
      Format.formatter -> ('a, 'b) result -> unit

  (* -- *)

  (**{1 Predicates and comparisons}*)

  (**[is_ok r] is [true] if [r = Ok _] else [false]*)
    val is_ok : ('a, 'b) result -> bool

  (**[is_error r] is [true] if [r = Error _] else [false]*)
    val is_error : ('a, 'b) result -> bool

  (**[compare ~ok ~error r r'] totally orders [r] and [r'] using [ok]
 and [error]*)
    val compare : 
      ok : ('a -> 'a -> int) -> 
      error : ('b -> 'b -> int) -> 
      ('a, 'b) result -> ('a, 'b) result -> int

  (* -- *)

  (**{1 Conversions}*)

  (**[to_option r] is [Some a] if [r = Ok a] else if [r = Err b] then
 [None]*)
    val to_option : ('a, 'b) result -> 'a option

  (**[of_option ~none r] is [Ok a] if [r = Some a] else if [r = None]
 then [none ()]*)
    val of_option :
      none : (unit -> ('a, 'b) result) -> 'a option -> ('a, 'b) result

  (**[to_presult r] is [r] reinterpreted as a polymorhpic variant
 result value*)
    val to_presult : ('a, 'b) result -> [> `Ok of 'a | `Error of 'b]

  (**[of_result pr] is [pr] reinterpred as a result value*)
    val of_presult : [< `Ok of 'a | `Error of 'b] -> ('a, 'b) result
      
  (* -- *)

  (**{1 Ignoring errors}*)

  (**[ignore_error ~use r] is [a] if [r = Ok a] else if [r = Error b]
 then [use b]*)
    val ignore_error : use : ('b -> 'a) -> ('a, 'b) result -> 'a

  (**[kignore_error ~use r] is [r] if [r = Ok _] 
 else if [r = Error b] then [use b]*)
    val kignore_error :
      use : ('b -> ('a, 'c) result) -> ('a, 'b) result -> ('a, 'c) result

  end;;

end;;
  (** {1:usage Usage design guidelines}

 These are rough design guidelines, don't forget to think!

 {2 Error messages}

 Use {{!RESULT.R.msgs} error messages} if:
 {ol
 {- Your error messages don't need to be localized, e.g. scripts,
 command line programs.}
 {- The errors don't need to be processed. They are just meant to
 be logged at a certain point in your program.}}

 If the above doesn't hold and your errors need to be processed for
 localization or error recovery then use a custom error type in
 your result values.

 {2 Custom error types}

 If your module has specific errors then define an error type and,
 a result type that tags this error type with the library name (or
 any other tag that makes sense, see for example {!RESULT.R.exn})
 along with the following functions:

 {[
 module M : sig

 type error = ...
 type 'a result = ('a, [`M of errror]) Result.result

 val pp_error : Format.formatter -> [`M of error] -> unit
 val open_error : 'a result -> ('a, [> `M of error]) Result.result
 val error_to_msg : 'a result -> ('a, Result.msg) Result.result

 ...
 ]}
 *)
