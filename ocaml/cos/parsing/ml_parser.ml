type token =
  | T_arrow
  | T_bar
  | T_colon
  | T_coloncolon
  | T_comma
  | T_comment of (string * Ml_location.t)
  | T_else
  | T_eof
  | T_eol
  | T_eq
  | T_false
  | T_fun
  | T_ident of (string)
  | T_if
  | T_in
  | T_int of (string)
  | T_lbracket
  | T_let
  | T_lparen
  | T_lt
  | T_match
  | T_minus
  | T_op of (string)
  | T_plus
  | T_rbracket
  | T_rec
  | T_rparen
  | T_semi
  | T_star
  | T_then
  | T_true
  | T_uident of (string)
  | T_underscore
  | T_when
  | T_with

open Parsing;;
let _ = parse_error;;
# 2 "ml_parser.mly"
  (**The parser*)

  open Ml_location
  open Ml_asttypes
  open Ml_ast

  (*Associate the text of the [pos]th element of right-hand-side of
    the matched rule with its location*)
  let mkrhs (rhs : string) (pos : int) : string loc = 
    (*The location of the [pos] item of the right-hand-side rule*)
    let loc = rhs_loc pos in
    mkloc rhs loc (*Associate the physical text with its location*)

  (*Produce a [pattern] from a [pattern_desc] and the location of
    the left-hand-side of the matched rule*)
  let mkpat (d : pattern_desc) : pattern = 
    let loc = symbol_rloc () in
    { ppat_desc = d; ppat_loc = loc }

  (*Produce a [pattern] (variable) from its ordinal position in the
    right-hand-side of the matched rule*)
  let mkpatvar (name : string) (pos : int) : pattern  =
    (*[rhs] is the identifier text together with it's location*)
    let rhs : string loc = mkrhs name pos in
    let loc = rhs_loc pos in (*[loc] is just the location*)
    let desc : pattern_desc = Ppat_var rhs in
    { ppat_desc = desc; ppat_loc = loc }

  (*Produce a [pattern] from the provided [pattern] but with a
    location that spans the left-hand-side of the matched rule*)
  let reloc_pat x = 
    { x with ppat_loc = symbol_rloc () } 

  (*Produce an [expression] from an [expression_desc] and the location
    of the left-hand-side of the matched rule*)
  let ghexp (e : expression_desc) : expression =
    let loc = symbol_gloc () in
    { pexp_desc = e; pexp_loc = loc }

  (*Produce a [pattern] from a [pattern_desc] and the location of
    the left-hand-side of the matched rule*)
  let ghpat (p : pattern_desc) : pattern =
    let loc = symbol_gloc () in
    { ppat_desc = p; ppat_loc = loc }

  (*Produce an [expression] from a [expression_desc] and the location
    of the left-hand-side of the matched rule*)
  let mkexp (e : expression_desc) : expression = 
    let loc = symbol_rloc () in
    { pexp_desc = e; pexp_loc = loc }

  (*Produce an [expression] from the provided [expression] but with a
    location that spans the left-hand-side of the matched rule
    (e.g. including surrounding parentheses)*)
  let reloc_exp x = 
    { x with pexp_loc = symbol_rloc () }

  (*Produce an expression (of case [Pexp_ident]) corresponding to the
    item at orinal position [pos] in the right hand side of the rule
    (including sourrounding parentheses)*)
  let mkoperator name pos =
    (*[rhs] is the operator text together with it's location*)
    let rhs : string loc = mkrhs name pos in
    let loc = rhs_loc pos in (*Location of the item at [pos]*)
    { pexp_desc = Pexp_ident rhs; pexp_loc = loc; }

  (*Produce a [structure_item] of the [Pstr_eval] case*)
  let mkstrexp (e : expression) : structure_item =
    { pstr_desc = Pstr_eval e; pstr_loc = e.pexp_loc }

  (*Produce a [structure_item] with a location that spans the
    left-hand-side of the matched rule*)
  let mkstr (d : structure_item_desc) : structure_item =
    let loc = symbol_rloc () in
    { pstr_desc = d; pstr_loc = loc }

  (*Prefix the provided text (representing a number) with a '-' if it
    doesn't already begin with one *)
  let neg_string f =
    if String.length f > 0 && f.[0] = '-'
    then String.sub f 1 (String.length f - 1)
    else "-" ^ f

  (*Apply unary minus to an expression*)
  let mkuminus (arg : expression) : expression =
    match arg.pexp_desc with
    | Pexp_constant (Pconst_int n) ->
      mkexp (Pexp_constant (Pconst_int (neg_string n)))
    | _ -> mkexp (Pexp_apply (mkoperator "-" 1, [arg]))

  (*Produce a 'cons' expression*)
  let mkexp_cons 
      (consloc : Ml_location.t) 
      (args : expression) 
      (loc : Ml_location.t) : expression =
    {pexp_desc = Pexp_construct (mkloc "::" consloc, Some args) 
    ; pexp_loc = loc}

  (*Produce a 'cons' pattern*)
  let mkpat_cons 
      (consloc : Ml_location.t) 
      (args : pattern) 
      (loc : Ml_location.t) : pattern =
    {ppat_desc = Ppat_construct (mkloc "::" consloc, Some args) 
    ; ppat_loc = loc}

  (*Produce an [expression] to represent a list*)
  let rec mktailexp 
      (nilloc : Ml_location.t) : expression list -> expression = function
    | [] ->
      let loc = { nilloc with loc_ghost = true } in
      let nil = { txt = "[]"; loc } in
      {pexp_desc = Pexp_construct (nil, None); pexp_loc = loc;}
    | e1 :: el ->
      let exp_el = mktailexp nilloc el in
      let loc = { loc_start = e1.pexp_loc.loc_start;
                  loc_end = exp_el.pexp_loc.loc_end;
                  loc_ghost = true} in
      let arg = {pexp_desc = Pexp_tuple [e1; exp_el]; pexp_loc = loc} in
      mkexp_cons {loc with loc_ghost = true} arg loc

  (*Produce a [pattern] to represent a list*)
  let rec mktailpat 
      (nilloc : Ml_location.t) : pattern list -> pattern = function
    | [] ->
      let loc = { nilloc with loc_ghost = true } in
      let nil = { txt = "[]"; loc } in
      {ppat_desc = Ppat_construct (nil, None); ppat_loc = loc;}
    | p1 :: pl ->
      let pat_pl = mktailpat nilloc pl in
      let loc = { loc_start = p1.ppat_loc.loc_start;
                  loc_end = pat_pl.ppat_loc.loc_end;
                  loc_ghost = true} in
      let arg = {ppat_desc = Ppat_tuple [p1; pat_pl]; ppat_loc = loc} in
      mkpat_cons {loc with loc_ghost = true} arg loc

  (*Apply an infix operator to two expressions*)
  let mkinfix 
      (arg1 : expression) 
      (name : string) 
      (arg2 : expression) : expression =
    mkexp (Pexp_apply (mkoperator name 2, [arg1; arg2]))

  (*The type of a let binding - a pattern, an expression and a
    location*)
  type let_binding =
    { lb_pattern: pattern;
      lb_expression: expression;
      lb_loc: Ml_location.t; }

  (*A list of let bindings, a recursion flag and a location*)
  type let_bindings =
    { lbs_bindings: let_binding list;
      lbs_rec: rec_flag;
      lbs_loc: Ml_location.t }

  let mkcase 
      (p : pattern)
      (g : expression option)
      (rhs : expression)
      : case = 
    { pc_lhs = p; pc_guard = g; pc_rhs = rhs }

  (*Produce a [let_binding] from a pair of pattern and expression
    and the location of the left-hand-side of the matched rule*)
  let mklb ((p, e) : (pattern * expression)): let_binding =
    { lb_pattern = p;
      lb_expression = e;
      lb_loc = symbol_rloc (); }

  (*Produce a [let_bindings] from a singleton [let_binding], a
    recursive flag and the location of the left-hand-side of the
    matched rule. We only handle singleton let bindings in this
    language, that is we don't support, [let x = ... and y = ...]
    style constructs. It does not mean we don't support let bindings
    that represent functions*)
  let mklbs rf lb =
    { lbs_bindings = [lb];
      lbs_rec = rf;
      lbs_loc = symbol_rloc (); }

  (*Convert a [let_bindings to an AST [value_binding list] and
    make a structure item out of that*)
  let val_of_let_bindings lbs =
    let bindings = 
      List.map (fun (lb : let_binding) -> 
          ({
            pvb_pat = lb.lb_pattern;
            pvb_expr = lb.lb_expression;
            pvb_loc = lb.lb_loc
          } : value_binding)
      )
        lbs.lbs_bindings
    in
    mkstr (Pstr_value (lbs.lbs_rec, List.rev bindings))

  (*Convert a [let_bindings] to an AST [value_binding list], associate
    it with the body and produce an expression from all that*)
  let expr_of_let_bindings 
      (lbs : let_bindings) 
      (body : expression) : expression =
    let bindings : value_binding list =
      List.map
        (fun (lb : let_binding) ->
          ({
            pvb_pat = lb.lb_pattern;
            pvb_expr = lb.lb_expression;
            pvb_loc = lb.lb_loc
          } : value_binding)
        )
        lbs.lbs_bindings
    in
    mkexp (Pexp_let (lbs.lbs_rec, List.rev bindings, body))

  (*Raise a syntax error exception for an unclosed construct*)
  let unclosed 
      (opening_name : string) 
      (opening_num : int)
      (closing_name : string) 
      (closing_num : int) : 'a =
    raise(Ml_syntaxerr.Error(
      Ml_syntaxerr.Unclosed(rhs_loc opening_num, opening_name,
                            rhs_loc closing_num, closing_name)))

  (*Raise a syntax error exception for an unexpected term*)
  let not_expecting pos nonterm =
    raise Ml_syntaxerr.(Error(Not_expecting(rhs_loc pos, nonterm)))

# 270 "ml_parser.ml"
let yytransl_const = [|
  257 (* T_arrow *);
  258 (* T_bar *);
  259 (* T_colon *);
  260 (* T_coloncolon *);
  261 (* T_comma *);
  263 (* T_else *);
  264 (* T_eof *);
  265 (* T_eol *);
  266 (* T_eq *);
  267 (* T_false *);
  268 (* T_fun *);
  270 (* T_if *);
  271 (* T_in *);
  273 (* T_lbracket *);
  274 (* T_let *);
  275 (* T_lparen *);
  276 (* T_lt *);
  277 (* T_match *);
  278 (* T_minus *);
  280 (* T_plus *);
  281 (* T_rbracket *);
  282 (* T_rec *);
  283 (* T_rparen *);
  284 (* T_semi *);
  285 (* T_star *);
  286 (* T_then *);
  287 (* T_true *);
  289 (* T_underscore *);
  290 (* T_when *);
  291 (* T_with *);
    0|]

let yytransl_block = [|
  262 (* T_comment *);
  269 (* T_ident *);
  272 (* T_int *);
  279 (* T_op *);
  288 (* T_uident *);
    0|]

let yylhs = "\255\255\
\003\000\004\000\004\000\006\000\006\000\007\000\001\000\002\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\008\000\018\000\020\000\020\000\022\000\022\000\013\000\013\000\
\016\000\016\000\010\000\010\000\010\000\010\000\010\000\010\000\
\011\000\011\000\024\000\024\000\015\000\015\000\026\000\026\000\
\009\000\009\000\009\000\009\000\012\000\012\000\028\000\028\000\
\028\000\028\000\028\000\027\000\027\000\021\000\017\000\017\000\
\017\000\017\000\017\000\023\000\019\000\019\000\025\000\025\000\
\014\000\014\000\000\000\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\000\000\002\000\001\000\002\000\002\000\
\001\000\002\000\003\000\003\000\005\000\006\000\001\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\001\000\
\001\000\003\000\002\000\003\000\002\000\002\000\002\000\002\000\
\003\000\003\000\001\000\001\000\001\000\003\000\004\000\003\000\
\001\000\002\000\001\000\003\000\001\000\003\000\003\000\005\000\
\001\000\001\000\002\000\003\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\001\000\001\000\002\000\
\002\000\001\000\001\000\001\000\000\000\001\000\000\000\001\000\
\000\000\001\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\067\000\062\000\068\000\000\000\
\000\000\066\000\063\000\055\000\075\000\000\000\049\000\000\000\
\053\000\056\000\000\000\054\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\076\000\000\000\000\000\000\000\
\000\000\000\000\025\000\037\000\035\000\077\000\000\000\000\000\
\003\000\000\000\000\000\064\000\065\000\000\000\000\000\000\000\
\007\000\051\000\000\000\000\000\057\000\000\000\000\000\000\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\036\000\000\000\016\000\001\000\005\000\006\000\059\000\058\000\
\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\000\000\026\000\000\000\040\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\032\000\000\000\000\000\039\000\000\000\000\000\
\000\000\027\000\074\000\000\000\000\000\000\000\000\000\030\000\
\000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\000\000"

let yydgoto = "\004\000\
\013\000\029\000\038\000\039\000\030\000\041\000\042\000\031\000\
\121\000\032\000\072\000\015\000\086\000\116\000\122\000\033\000\
\034\000\035\000\058\000\091\000\036\000\114\000\037\000\056\000\
\089\000\123\000\019\000\020\000"

let yysindex = "\098\000\
\177\002\147\002\147\002\000\000\000\000\000\000\000\000\233\254\
\170\002\000\000\000\000\000\000\000\000\089\255\000\000\177\002\
\000\000\000\000\024\255\000\000\177\002\147\002\101\002\028\255\
\124\002\147\002\147\002\000\000\000\000\034\002\037\255\230\002\
\064\255\230\002\000\000\000\000\000\000\000\000\082\255\055\002\
\000\000\084\255\037\255\000\000\000\000\010\255\177\002\177\002\
\000\000\000\000\177\002\240\001\000\000\021\002\055\002\076\255\
\000\000\177\002\026\255\000\002\085\255\147\002\147\002\000\000\
\147\002\147\002\147\002\147\002\147\002\147\002\000\000\230\002\
\000\000\147\002\000\000\000\000\000\000\000\000\000\000\000\000\
\102\255\102\255\102\255\147\002\240\001\000\000\147\002\147\002\
\088\255\029\255\000\000\078\002\000\000\000\000\105\255\063\002\
\114\255\063\002\055\002\243\254\243\254\085\255\055\002\000\000\
\114\255\055\002\000\000\042\002\055\002\000\000\147\002\147\002\
\078\002\000\000\000\000\177\002\147\002\055\002\055\002\000\000\
\008\255\115\255\000\000\055\002\147\002\147\002\177\002\055\002\
\008\002\000\000\147\002\055\002"

let yyrindex = "\000\000\
\000\000\000\000\108\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\001\
\000\000\000\000\017\255\000\000\000\000\000\000\000\000\200\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\228\255\
\068\000\004\000\000\000\000\000\000\000\000\000\000\000\112\255\
\000\000\108\255\020\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\255\096\255\
\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\217\255\015\000\047\000\000\000\000\000\000\000\000\000\104\255\
\000\000\000\000\000\000\053\255\000\000\000\000\207\002\173\255\
\034\001\003\001\169\255\196\000\228\000\132\000\096\001\000\000\
\065\001\127\001\000\000\000\000\058\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\249\254\062\255\000\000\
\000\000\164\000\000\000\158\001\000\000\000\000\000\000\189\001\
\000\000\000\000\000\000\220\001"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\253\255\085\000\000\000\003\000\
\031\000\227\255\000\000\239\255\045\000\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\094\000\020\000\110\000\000\000\
\000\000\008\000\000\000\000\000"

let yytablesize = 1030
let yytable = "\040\000\
\028\000\044\000\071\000\052\000\075\000\043\000\066\000\028\000\
\125\000\079\000\028\000\047\000\048\000\047\000\048\000\069\000\
\050\000\050\000\054\000\055\000\050\000\059\000\060\000\061\000\
\050\000\093\000\050\000\006\000\051\000\062\000\063\000\014\000\
\047\000\048\000\085\000\065\000\080\000\006\000\111\000\046\000\
\016\000\126\000\104\000\050\000\078\000\066\000\050\000\067\000\
\016\000\068\000\050\000\070\000\094\000\057\000\069\000\016\000\
\053\000\053\000\096\000\097\000\053\000\098\000\099\000\100\000\
\101\000\102\000\103\000\085\000\074\000\029\000\105\000\073\000\
\043\000\073\000\113\000\043\000\029\000\081\000\082\000\029\000\
\106\000\083\000\044\000\108\000\109\000\044\000\016\000\016\000\
\090\000\076\000\016\000\053\000\047\000\048\000\017\000\113\000\
\049\000\016\000\001\000\002\000\003\000\024\000\017\000\088\000\
\066\000\047\000\115\000\118\000\119\000\017\000\018\000\073\000\
\110\000\124\000\017\000\004\000\127\000\062\000\018\000\002\000\
\071\000\128\000\129\000\065\000\053\000\018\000\077\000\132\000\
\072\000\107\000\018\000\053\000\120\000\066\000\130\000\067\000\
\000\000\068\000\000\000\000\000\017\000\017\000\069\000\000\000\
\017\000\017\000\000\000\000\000\000\000\000\000\000\000\092\000\
\053\000\000\000\000\000\016\000\018\000\018\000\000\000\000\000\
\018\000\018\000\000\000\000\000\000\000\000\000\016\000\018\000\
\022\000\022\000\022\000\000\000\017\000\017\000\017\000\022\000\
\022\000\017\000\017\000\017\000\017\000\000\000\017\000\022\000\
\000\000\017\000\022\000\017\000\000\000\000\000\017\000\000\000\
\000\000\022\000\018\000\022\000\022\000\017\000\022\000\017\000\
\017\000\018\000\017\000\022\000\000\000\000\000\017\000\017\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\052\000\000\000\000\000\017\000\052\000\018\000\000\000\
\052\000\018\000\052\000\009\000\009\000\009\000\000\000\009\000\
\009\000\000\000\009\000\009\000\018\000\009\000\000\000\000\000\
\000\000\000\000\009\000\052\000\000\000\009\000\000\000\009\000\
\000\000\009\000\052\000\009\000\009\000\000\000\009\000\009\000\
\009\000\009\000\000\000\036\000\036\000\036\000\009\000\036\000\
\036\000\000\000\036\000\036\000\000\000\036\000\061\000\061\000\
\000\000\000\000\036\000\061\000\000\000\036\000\061\000\036\000\
\061\000\036\000\000\000\036\000\036\000\000\000\036\000\036\000\
\036\000\036\000\000\000\010\000\010\000\010\000\036\000\010\000\
\010\000\061\000\010\000\010\000\000\000\010\000\060\000\060\000\
\061\000\000\000\010\000\060\000\000\000\010\000\060\000\010\000\
\060\000\010\000\000\000\010\000\010\000\000\000\010\000\010\000\
\010\000\010\000\000\000\015\000\015\000\015\000\010\000\015\000\
\000\000\060\000\015\000\015\000\000\000\015\000\000\000\000\000\
\060\000\000\000\015\000\000\000\000\000\015\000\000\000\015\000\
\000\000\015\000\000\000\015\000\015\000\000\000\015\000\015\000\
\015\000\015\000\000\000\023\000\023\000\023\000\015\000\023\000\
\023\000\000\000\023\000\023\000\000\000\023\000\000\000\000\000\
\000\000\000\000\023\000\000\000\000\000\023\000\000\000\000\000\
\000\000\023\000\000\000\023\000\023\000\000\000\023\000\023\000\
\023\000\023\000\000\000\020\000\020\000\020\000\023\000\020\000\
\020\000\000\000\020\000\020\000\000\000\020\000\000\000\000\000\
\000\000\000\000\020\000\000\000\000\000\020\000\000\000\000\000\
\000\000\020\000\000\000\020\000\020\000\000\000\020\000\020\000\
\020\000\020\000\000\000\013\000\013\000\000\000\020\000\013\000\
\013\000\000\000\013\000\013\000\000\000\013\000\000\000\000\000\
\000\000\000\000\013\000\000\000\000\000\013\000\000\000\013\000\
\000\000\013\000\000\000\013\000\013\000\000\000\013\000\013\000\
\013\000\013\000\000\000\019\000\019\000\019\000\013\000\019\000\
\019\000\000\000\019\000\019\000\000\000\019\000\000\000\000\000\
\000\000\000\000\019\000\000\000\000\000\019\000\000\000\000\000\
\000\000\019\000\000\000\019\000\019\000\000\000\019\000\019\000\
\000\000\019\000\000\000\018\000\018\000\018\000\019\000\018\000\
\018\000\000\000\018\000\018\000\000\000\018\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\018\000\000\000\000\000\
\000\000\018\000\000\000\018\000\018\000\000\000\018\000\018\000\
\000\000\018\000\021\000\021\000\021\000\000\000\018\000\021\000\
\000\000\021\000\021\000\000\000\021\000\000\000\000\000\000\000\
\000\000\021\000\057\000\057\000\021\000\000\000\057\000\057\000\
\000\000\000\000\057\000\021\000\057\000\021\000\021\000\000\000\
\021\000\034\000\034\000\034\000\000\000\021\000\034\000\000\000\
\034\000\034\000\000\000\000\000\000\000\057\000\000\000\000\000\
\034\000\000\000\000\000\034\000\057\000\000\000\000\000\000\000\
\000\000\000\000\034\000\000\000\034\000\034\000\000\000\034\000\
\033\000\033\000\033\000\000\000\034\000\033\000\000\000\033\000\
\033\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\033\000\033\000\000\000\033\000\011\000\
\011\000\011\000\000\000\033\000\000\000\000\000\011\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\000\000\011\000\011\000\000\000\011\000\031\000\031\000\
\031\000\000\000\011\000\000\000\000\000\031\000\031\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\000\000\031\000\031\000\000\000\031\000\014\000\014\000\014\000\
\000\000\031\000\000\000\000\000\014\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\
\014\000\014\000\000\000\014\000\047\000\047\000\047\000\000\000\
\014\000\000\000\000\000\047\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\000\000\047\000\
\047\000\000\000\047\000\048\000\048\000\048\000\000\000\047\000\
\000\000\000\000\048\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\000\000\000\000\048\000\000\000\000\000\
\084\000\000\000\000\000\000\000\048\000\000\000\048\000\048\000\
\000\000\048\000\005\000\000\000\006\000\000\000\048\000\007\000\
\008\000\000\000\009\000\062\000\063\000\000\000\000\000\000\000\
\131\000\065\000\000\000\062\000\063\000\000\000\010\000\011\000\
\012\000\065\000\000\000\066\000\000\000\067\000\000\000\068\000\
\062\000\063\000\000\000\066\000\069\000\067\000\065\000\068\000\
\000\000\000\000\095\000\000\000\069\000\062\000\063\000\000\000\
\066\000\064\000\067\000\065\000\068\000\062\000\063\000\000\000\
\117\000\069\000\087\000\065\000\000\000\066\000\000\000\067\000\
\000\000\068\000\062\000\063\000\000\000\066\000\069\000\067\000\
\065\000\068\000\062\000\000\000\000\000\000\000\069\000\000\000\
\000\000\000\000\066\000\000\000\067\000\000\000\068\000\000\000\
\000\000\000\000\066\000\069\000\067\000\000\000\068\000\112\000\
\005\000\000\000\006\000\069\000\000\000\007\000\008\000\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\011\000\012\000\005\000\
\021\000\006\000\022\000\000\000\007\000\023\000\024\000\025\000\
\000\000\026\000\027\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\010\000\011\000\028\000\005\000\021\000\
\006\000\022\000\000\000\007\000\023\000\024\000\025\000\000\000\
\026\000\027\000\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\010\000\011\000\028\000\005\000\021\000\006\000\
\022\000\000\000\007\000\023\000\024\000\025\000\000\000\026\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\011\000\028\000\005\000\000\000\006\000\000\000\
\000\000\007\000\008\000\005\000\009\000\006\000\000\000\000\000\
\007\000\008\000\000\000\009\000\045\000\000\000\000\000\000\000\
\010\000\011\000\012\000\000\000\000\000\000\000\000\000\010\000\
\011\000\012\000\069\000\000\000\069\000\000\000\000\000\069\000\
\069\000\073\000\069\000\073\000\000\000\000\000\073\000\073\000\
\000\000\073\000\000\000\000\000\000\000\000\000\069\000\069\000\
\069\000\000\000\000\000\000\000\000\000\073\000\073\000\073\000\
\005\000\000\000\006\000\000\000\000\000\007\000\023\000\000\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\011\000"

let yycheck = "\003\000\
\008\001\025\001\032\000\021\000\034\000\003\000\020\001\015\001\
\001\001\000\001\018\001\004\001\005\001\004\001\005\001\029\001\
\000\001\001\001\022\000\023\000\004\001\025\000\026\000\027\000\
\008\001\000\001\010\001\008\001\005\001\004\001\005\001\001\000\
\004\001\005\001\052\000\010\001\027\001\018\001\010\001\009\000\
\001\000\034\001\072\000\027\001\042\000\020\001\016\000\022\001\
\009\000\024\001\034\001\015\001\027\001\026\001\029\001\016\000\
\004\001\005\001\062\000\063\000\021\000\065\000\066\000\067\000\
\068\000\069\000\070\000\085\000\005\001\008\001\074\000\032\000\
\025\001\034\000\092\000\028\001\015\001\047\000\048\000\018\001\
\084\000\051\000\025\001\087\000\088\000\028\001\047\000\048\000\
\058\000\008\001\051\000\052\000\004\001\005\001\001\000\113\000\
\008\001\058\000\001\000\002\000\003\000\018\001\009\000\028\001\
\020\001\004\001\002\001\111\000\112\000\016\000\001\000\072\000\
\025\001\117\000\021\000\008\001\002\001\004\001\009\000\008\001\
\025\001\125\000\126\000\010\001\085\000\016\000\042\000\131\000\
\025\001\085\000\021\000\092\000\113\000\020\001\127\000\022\001\
\255\255\024\001\255\255\255\255\047\000\048\000\029\001\255\255\
\051\000\052\000\255\255\255\255\255\255\255\255\255\255\058\000\
\113\000\255\255\255\255\116\000\047\000\048\000\255\255\255\255\
\051\000\052\000\255\255\255\255\255\255\255\255\127\000\058\000\
\000\001\001\001\002\001\255\255\000\001\001\001\002\001\007\001\
\008\001\005\001\085\000\007\001\008\001\255\255\010\001\015\001\
\255\255\092\000\018\001\015\001\255\255\255\255\018\001\255\255\
\255\255\025\001\085\000\027\001\028\001\025\001\030\001\027\001\
\028\001\092\000\030\001\035\001\255\255\255\255\113\000\035\001\
\255\255\116\000\255\255\255\255\255\255\255\255\255\255\255\255\
\000\001\001\001\255\255\255\255\127\000\005\001\113\000\255\255\
\008\001\116\000\010\001\000\001\001\001\002\001\255\255\004\001\
\005\001\255\255\007\001\008\001\127\000\010\001\255\255\255\255\
\255\255\255\255\015\001\027\001\255\255\018\001\255\255\020\001\
\255\255\022\001\034\001\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\255\255\000\001\001\001\002\001\035\001\004\001\
\005\001\255\255\007\001\008\001\255\255\010\001\000\001\001\001\
\255\255\255\255\015\001\005\001\255\255\018\001\008\001\020\001\
\010\001\022\001\255\255\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\255\255\000\001\001\001\002\001\035\001\004\001\
\005\001\027\001\007\001\008\001\255\255\010\001\000\001\001\001\
\034\001\255\255\015\001\005\001\255\255\018\001\008\001\020\001\
\010\001\022\001\255\255\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\255\255\000\001\001\001\002\001\035\001\004\001\
\255\255\027\001\007\001\008\001\255\255\010\001\255\255\255\255\
\034\001\255\255\015\001\255\255\255\255\018\001\255\255\020\001\
\255\255\022\001\255\255\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\255\255\000\001\001\001\002\001\035\001\004\001\
\005\001\255\255\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\018\001\255\255\255\255\
\255\255\022\001\255\255\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\255\255\000\001\001\001\002\001\035\001\004\001\
\005\001\255\255\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\018\001\255\255\255\255\
\255\255\022\001\255\255\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\255\255\000\001\001\001\255\255\035\001\004\001\
\005\001\255\255\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\018\001\255\255\020\001\
\255\255\022\001\255\255\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\255\255\000\001\001\001\002\001\035\001\004\001\
\005\001\255\255\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\018\001\255\255\255\255\
\255\255\022\001\255\255\024\001\025\001\255\255\027\001\028\001\
\255\255\030\001\255\255\000\001\001\001\002\001\035\001\004\001\
\005\001\255\255\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\018\001\255\255\255\255\
\255\255\022\001\255\255\024\001\025\001\255\255\027\001\028\001\
\255\255\030\001\000\001\001\001\002\001\255\255\035\001\005\001\
\255\255\007\001\008\001\255\255\010\001\255\255\255\255\255\255\
\255\255\015\001\000\001\001\001\018\001\255\255\004\001\005\001\
\255\255\255\255\008\001\025\001\010\001\027\001\028\001\255\255\
\030\001\000\001\001\001\002\001\255\255\035\001\005\001\255\255\
\007\001\008\001\255\255\255\255\255\255\027\001\255\255\255\255\
\015\001\255\255\255\255\018\001\034\001\255\255\255\255\255\255\
\255\255\255\255\025\001\255\255\027\001\028\001\255\255\030\001\
\000\001\001\001\002\001\255\255\035\001\005\001\255\255\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\255\255\255\255\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\255\255\027\001\028\001\255\255\030\001\000\001\
\001\001\002\001\255\255\035\001\255\255\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\255\255\
\255\255\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\025\001\255\255\027\001\028\001\255\255\030\001\000\001\001\001\
\002\001\255\255\035\001\255\255\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\255\255\255\255\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\255\255\027\001\028\001\255\255\030\001\000\001\001\001\002\001\
\255\255\035\001\255\255\255\255\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\255\255\255\255\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\255\255\
\027\001\028\001\255\255\030\001\000\001\001\001\002\001\255\255\
\035\001\255\255\255\255\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\255\255\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\255\255\027\001\
\028\001\255\255\030\001\000\001\001\001\002\001\255\255\035\001\
\255\255\255\255\007\001\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\018\001\255\255\255\255\
\001\001\255\255\255\255\255\255\025\001\255\255\027\001\028\001\
\255\255\030\001\011\001\255\255\013\001\255\255\035\001\016\001\
\017\001\255\255\019\001\004\001\005\001\255\255\255\255\255\255\
\001\001\010\001\255\255\004\001\005\001\255\255\031\001\032\001\
\033\001\010\001\255\255\020\001\255\255\022\001\255\255\024\001\
\004\001\005\001\255\255\020\001\029\001\022\001\010\001\024\001\
\255\255\255\255\035\001\255\255\029\001\004\001\005\001\255\255\
\020\001\008\001\022\001\010\001\024\001\004\001\005\001\255\255\
\007\001\029\001\030\001\010\001\255\255\020\001\255\255\022\001\
\255\255\024\001\004\001\005\001\255\255\020\001\029\001\022\001\
\010\001\024\001\004\001\255\255\255\255\255\255\029\001\255\255\
\255\255\255\255\020\001\255\255\022\001\255\255\024\001\255\255\
\255\255\255\255\020\001\029\001\022\001\255\255\024\001\010\001\
\011\001\255\255\013\001\029\001\255\255\016\001\017\001\255\255\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\033\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\255\255\255\255\025\001\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\255\255\255\255\255\255\255\255\027\001\255\255\
\255\255\255\255\031\001\032\001\033\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\033\001\011\001\255\255\013\001\255\255\
\255\255\016\001\017\001\011\001\019\001\013\001\255\255\255\255\
\016\001\017\001\255\255\019\001\027\001\255\255\255\255\255\255\
\031\001\032\001\033\001\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\011\001\255\255\013\001\255\255\255\255\016\001\
\017\001\011\001\019\001\013\001\255\255\255\255\016\001\017\001\
\255\255\019\001\255\255\255\255\255\255\255\255\031\001\032\001\
\033\001\255\255\255\255\255\255\255\255\031\001\032\001\033\001\
\011\001\255\255\013\001\255\255\255\255\016\001\017\001\255\255\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001"

let yynames_const = "\
  T_arrow\000\
  T_bar\000\
  T_colon\000\
  T_coloncolon\000\
  T_comma\000\
  T_else\000\
  T_eof\000\
  T_eol\000\
  T_eq\000\
  T_false\000\
  T_fun\000\
  T_if\000\
  T_in\000\
  T_lbracket\000\
  T_let\000\
  T_lparen\000\
  T_lt\000\
  T_match\000\
  T_minus\000\
  T_plus\000\
  T_rbracket\000\
  T_rec\000\
  T_rparen\000\
  T_semi\000\
  T_star\000\
  T_then\000\
  T_true\000\
  T_underscore\000\
  T_when\000\
  T_with\000\
  "

let yynames_block = "\
  T_comment\000\
  T_ident\000\
  T_int\000\
  T_op\000\
  T_uident\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'top_structure) in
    Obj.repr(
# 306 "ml_parser.mly"
                                                             ( Ptop_def _1 )
# 716 "ml_parser.ml"
               : Ml_ast.toplevel_phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 310 "ml_parser.mly"
                                                          (  [mkstrexp _1] )
# 723 "ml_parser.ml"
               : 'top_structure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'top_structure_tail) in
    Obj.repr(
# 311 "ml_parser.mly"
                                                                      ( _1 )
# 730 "ml_parser.ml"
               : 'top_structure))
; (fun __caml_parser_env ->
    Obj.repr(
# 314 "ml_parser.mly"
                                                                      ( [] )
# 736 "ml_parser.ml"
               : 'top_structure_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'top_structure_tail) in
    Obj.repr(
# 315 "ml_parser.mly"
                                                                ( _1 :: _2 )
# 744 "ml_parser.ml"
               : 'top_structure_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_bindings) in
    Obj.repr(
# 318 "ml_parser.mly"
                                                  ( val_of_let_bindings _1 )
# 751 "ml_parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 322 "ml_parser.mly"
                                                                      ( _1 )
# 758 "ml_parser.ml"
               : Ml_ast.pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 326 "ml_parser.mly"
                                                                      ( _1 )
# 765 "ml_parser.ml"
               : Ml_ast.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 330 "ml_parser.mly"
                                                                      ( _1 )
# 772 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr_list) in
    Obj.repr(
# 331 "ml_parser.mly"
                                    ( mkexp (Pexp_apply (_1, List.rev _2)) )
# 780 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'let_bindings) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 332 "ml_parser.mly"
                                              ( expr_of_let_bindings _1 _3 )
# 788 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fun_def) in
    Obj.repr(
# 333 "ml_parser.mly"
                                                ( mkexp (Pexp_fun (_2, _3)))
# 796 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_bar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'match_cases) in
    Obj.repr(
# 334 "ml_parser.mly"
                                           (
                                       mkexp (Pexp_match (_2, List.rev _5)))
# 806 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 336 "ml_parser.mly"
                                     (mkexp(Pexp_if_then_else (_2, _4, _6)))
# 815 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_comma_list) in
    Obj.repr(
# 337 "ml_parser.mly"
                                        ( mkexp (Pexp_tuple (List.rev _1)) )
# 822 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constr_ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 338 "ml_parser.mly"
                             ( mkexp (Pexp_construct (mkrhs _1 1, Some _2)))
# 830 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 339 "ml_parser.mly"
                          (
      mkexp_cons (rhs_loc 2) (ghexp (Pexp_tuple [_1; _3])) (symbol_rloc()) )
# 839 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 341 "ml_parser.mly"
                                                       ( mkinfix _1 "+" _3 )
# 847 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 342 "ml_parser.mly"
                                                       ( mkinfix _1 "-" _3 )
# 855 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 343 "ml_parser.mly"
                                                       ( mkinfix _1 "*" _3 )
# 863 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 344 "ml_parser.mly"
                                                       ( mkinfix _1 "=" _3 )
# 871 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 345 "ml_parser.mly"
                                                       ( mkinfix _1 "<" _3 )
# 879 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 346 "ml_parser.mly"
                                                             ( mkuminus _2 )
# 886 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 347 "ml_parser.mly"
                                        ( not_expecting 1 "wildcard \"_\"" )
# 892 "ml_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_binding) in
    Obj.repr(
# 350 "ml_parser.mly"
                                                                      ( _1 )
# 899 "ml_parser.ml"
               : 'let_bindings))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rec_flag) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'let_binding_body) in
    Obj.repr(
# 353 "ml_parser.mly"
                                                      ( mklbs _2 (mklb _3) )
# 907 "ml_parser.ml"
               : 'let_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_binding) in
    Obj.repr(
# 356 "ml_parser.mly"
                                                     ( (mkpatvar _1 1, _2) )
# 915 "ml_parser.ml"
               : 'let_binding_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 357 "ml_parser.mly"
                                                                ( (_1, _3) )
# 923 "ml_parser.ml"
               : 'let_binding_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 360 "ml_parser.mly"
                                                                      ( _2 )
# 930 "ml_parser.ml"
               : 'fun_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_binding) in
    Obj.repr(
# 361 "ml_parser.mly"
                                               ( mkexp (Pexp_fun (_1, _2)) )
# 938 "ml_parser.ml"
               : 'fun_binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 364 "ml_parser.mly"
                                                                      ( _2 )
# 945 "ml_parser.ml"
               : 'fun_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_def) in
    Obj.repr(
# 365 "ml_parser.mly"
                                                ( mkexp (Pexp_fun (_1, _2)))
# 953 "ml_parser.ml"
               : 'fun_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 368 "ml_parser.mly"
                                                                ( _3 :: _1 )
# 961 "ml_parser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 369 "ml_parser.mly"
                                                                ( [_3; _1] )
# 969 "ml_parser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 372 "ml_parser.mly"
                                                ( mkexp (Pexp_constant _1) )
# 976 "ml_parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constr_ident) in
    Obj.repr(
# 373 "ml_parser.mly"
                               ( mkexp (Pexp_construct (mkrhs _1 1, None)) )
# 983 "ml_parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 374 "ml_parser.mly"
                                        ( mkexp (Pexp_ident (mkrhs _1 1))  )
# 990 "ml_parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 375 "ml_parser.mly"
                                                           ( reloc_exp _2  )
# 997 "ml_parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 376 "ml_parser.mly"
                                                  ( 
                           reloc_exp (mktailexp (rhs_loc 4) (List.rev _2)) )
# 1006 "ml_parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 378 "ml_parser.mly"
                                                    ( unclosed "(" 1 ")" 3 )
# 1013 "ml_parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 381 "ml_parser.mly"
                                                                    ( [_1] )
# 1020 "ml_parser.ml"
               : 'simple_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 382 "ml_parser.mly"
                                                                ( _2 :: _1 )
# 1028 "ml_parser.ml"
               : 'simple_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 385 "ml_parser.mly"
                                                                    ( [_1] )
# 1035 "ml_parser.ml"
               : 'expr_semi_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 386 "ml_parser.mly"
                                                                ( _3 :: _1 )
# 1043 "ml_parser.ml"
               : 'expr_semi_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'match_case) in
    Obj.repr(
# 390 "ml_parser.mly"
                                                                      ([_1])
# 1050 "ml_parser.ml"
               : 'match_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'match_cases) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'match_case) in
    Obj.repr(
# 391 "ml_parser.mly"
                                                                ( _3 :: _1 )
# 1058 "ml_parser.ml"
               : 'match_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 394 "ml_parser.mly"
                                                       ( mkcase _1 None _3 )
# 1066 "ml_parser.ml"
               : 'match_case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 395 "ml_parser.mly"
                                                  ( mkcase _1 (Some _3) _5 )
# 1075 "ml_parser.ml"
               : 'match_case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pattern) in
    Obj.repr(
# 401 "ml_parser.mly"
                                                                      ( _1 )
# 1082 "ml_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_comma_list) in
    Obj.repr(
# 402 "ml_parser.mly"
                                                   ( mkpat (Ppat_tuple _1) )
# 1089 "ml_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constr_ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 404 "ml_parser.mly"
                             ( mkpat (Ppat_construct(mkrhs _1 1, Some _2)) )
# 1097 "ml_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 405 "ml_parser.mly"
                                 (
    mkpat_cons (rhs_loc 2)  (ghpat (Ppat_tuple [_1; _3])) (symbol_rloc ()) )
# 1106 "ml_parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 409 "ml_parser.mly"
                                            ( mkpat(Ppat_var (mkrhs _1 1)) )
# 1113 "ml_parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pattern_not_ident) in
    Obj.repr(
# 410 "ml_parser.mly"
                                                                      ( _1 )
# 1120 "ml_parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 413 "ml_parser.mly"
                                                        ( mkpat (Ppat_any) )
# 1126 "ml_parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 414 "ml_parser.mly"
                                                ( mkpat (Ppat_constant _1) )
# 1133 "ml_parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constr_ident) in
    Obj.repr(
# 415 "ml_parser.mly"
                               ( mkpat (Ppat_construct (mkrhs _1 1, None)) )
# 1140 "ml_parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 416 "ml_parser.mly"
                                                            ( reloc_pat _2 )
# 1147 "ml_parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 417 "ml_parser.mly"
                                                    ( unclosed "(" 1 ")" 3 )
# 1154 "ml_parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 420 "ml_parser.mly"
                                                                ( _3 :: _1 )
# 1162 "ml_parser.ml"
               : 'pattern_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 421 "ml_parser.mly"
                                                                ( [_3; _1] )
# 1170 "ml_parser.ml"
               : 'pattern_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 427 "ml_parser.mly"
                                                                      ( _1 )
# 1177 "ml_parser.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 430 "ml_parser.mly"
                                                                      ( _1 )
# 1184 "ml_parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 431 "ml_parser.mly"
                                                                    ( "[]" )
# 1190 "ml_parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 432 "ml_parser.mly"
                                                                    ( "()" )
# 1196 "ml_parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 433 "ml_parser.mly"
                                                                  ( "true" )
# 1202 "ml_parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 434 "ml_parser.mly"
                                                                 ( "false" )
# 1208 "ml_parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 440 "ml_parser.mly"
                                                           ( Pconst_int _1 )
# 1215 "ml_parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    Obj.repr(
# 446 "ml_parser.mly"
                                                            ( Nonrecursive )
# 1221 "ml_parser.ml"
               : 'rec_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 447 "ml_parser.mly"
                                                               ( Recursive )
# 1227 "ml_parser.ml"
               : 'rec_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 451 "ml_parser.mly"
                                                                        (())
# 1233 "ml_parser.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 452 "ml_parser.mly"
                                                                        (())
# 1239 "ml_parser.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 456 "ml_parser.mly"
                                                                        (())
# 1245 "ml_parser.ml"
               : 'opt_bar))
; (fun __caml_parser_env ->
    Obj.repr(
# 457 "ml_parser.mly"
                                                                        (())
# 1251 "ml_parser.ml"
               : 'opt_bar))
(* Entry parse_pattern *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry parse_expression *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry toplevel_phrase *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let parse_pattern (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ml_ast.pattern)
let parse_expression (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Ml_ast.expression)
let toplevel_phrase (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Ml_ast.toplevel_phrase)
;;
